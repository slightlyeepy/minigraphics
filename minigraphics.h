/*
 * minigraphics in-development (versioned releases will come later)
 *
 * NOTE: minigraphics uses an indentifier called 'mg' and identifiers
 * beginning with 'mg__' or 'MG__' internally; using these may cause
 * conflicts.
 *
 * ===========================================================================
 * LICENSE
 *
 * see the end of the file for license information.
 *
 * ===========================================================================
 * USAGE
 *
 * make sure to read the "BACKEND-SPECIFIC INSTRUCTIONS" section below.
 *
 * include this header wherever you need it as usual. in ONE file, add:
 * 	#define MG_IMPLEMENTATION
 * before the #include for this header.
 *
 * additionally, you'll need to define ONE of these macros:
 * 	#define MG_BACKEND_X11
 * 	#define MG_BACKEND_WAYLAND
 * to use one of the respective backends. the same backend must be defined in
 * ANY file that includes this header.
 *
 * to make the implementation private to the file that generates it, also add:
 * 	#define MG_STATIC
 *
 * by default, __attribute__((__unused__)) is used if __GNUC__ is defined;
 * you can override this by defining MG_UNUSED to some value to be used
 * instead of the attribute, or setting it to an empty value:
 * 	#define MG_UNUSED
 *
 * see the "DOCS" section for the API documentation.
 * see the examples directory for example programs.
 *
 * ===========================================================================
 * BACKEND-SPECIFIC INSTRUCTIONS
 *
 * X11
 * --------------------------
 * link with -lX11.
 *
 * example compiler command:
 * cc -lX11 -DMG_BACKEND_X11 -o program program.c
 *
 * WAYLAND
 * --------------------------
 * link with -lrt -lwayland-client -lxkbcommon.
 *
 * additionally,
 * you'll need the header xdg-shell-client-protocol.h in your include paths,
 * AND you'll need to add xdg-shell-protocol.c to your sources.
 *
 * to generate these files, make sure you have wayland-protocols and
 * wayland-scanner (typically provided by a package named 'wayland' or
 * 'wayland-devel') installed and then run:
 *
 * wayland-scanner private-code \
 * 		< /usr/share/wayland-protocols/stable/xdg-shell/xdg-shell.xml \
 * 		> xdg-shell-protocol.c
 *
 * wayland-scanner client-header \
 * 		< /usr/share/wayland-protocols/stable/xdg-shell/xdg-shell.xml \
 * 		> xdg-shell-client-protocol.h
 *
 * note that xdg-shell.xml may be located somewhere else on your system.
 *
 * example compiler command:
 * cc -lrt -lwayland-client -lxkbcommon -DMG_BACKEND_WAYLAND -I. \
 * 		-o program xdg-shell-protocol.c program.c
 */
#if !defined(MG_H)
#define MG_H
#include <setjmp.h>
#include <stdint.h>

#include <xkbcommon/xkbcommon-keysyms.h>

#if defined(MG_STATIC)
#define MG__DEF static
#else
#define MG__DEF extern
#endif /* defined(MG_STATIC) */

#if !defined(MG_UNUSED)

#if defined(__GNUC__)
#define MG_UNUSED __attribute__((__unused__))
#else
#define MG_UNUSED
#endif /* defined(__GNUC__) */

#endif /* !defined(MG_UNUSED) */

/*
 * ===========================================================================
 * DOCS (+ header)
 *
 * these global variables hold the current window dimensions and are updated
 * automatically whenever it is resized.
 */
extern int mg_width;
extern int mg_height;
/* these are all of the errors that can be generated by this library. */
enum mg_error {
	MG_INIT_FAILED,
	MG_OUT_OF_MEMORY,
	MG_UNSUPPORTED_COLOR_DEPTH,
	MG_UNSUPPORTED_KEYMAP
};
/*
 * this global variable holds the error type if the library encounters an
 * error (for more info, see below, at mg_init())
 */
extern enum mg_error mg_errno;
/*
 * minigraphics uses an event loop for handling of things such as
 * key presses, mouse clicks/movement, etc.
 * these are all of the possible events that can be recieved.
 */
enum mg_event_type {
	MG_NOEVENT,     /* used internally, never reported */
	MG_QUIT,        /* user has requested to close the window */
	MG_RESIZE,      /* window has been resized (& should be redrawn) */
	MG_REDRAW,      /* window should be redrawn */
	MG_KEYDOWN,     /* a key on the keyboard has been pressed */
	MG_KEYUP,       /* a key on the keyboard has been unpressed */
	MG_MOUSEDOWN,   /* a button on the mouse has been pressed */
	MG_MOUSEUP,     /* a button on the mouse has been unpressed */
	MG_MOUSEMOTION  /* the mouse has moved */
};
/* a mouse button is represented one of the following values: */
enum mg_mouse_btn {
	MG_MOUSE_NO_BUTTON, /* used internally, never reported */
	MG_MOUSE_LEFT,
	MG_MOUSE_MIDDLE,
	MG_MOUSE_RIGHT,
	MG_MOUSE_SIDE,
	MG_MOUSE_EXTRA
	/*
	 * note -- mouse buttons past 5 aren't really standardized, so there
	 * isn't a good consistent way to support more
	 */
};
/* available pixel formats are: */
enum mg_pixel_format {
	MG_PIXEL_FORMAT_RGBX, /* RGBA with A component ignored, 4 bytes per pixel */
	MG_PIXEL_FORMAT_BGRX, /* BGRA with A component ignored, 4 bytes per pixel */
	MG_PIXEL_FORMAT_XRGB, /* ARGB with A component ignored, 4 bytes per pixel */
	MG_PIXEL_FORMAT_XBGR, /* ABGR with A component ignored, 4 bytes per pixel */
	MG_PIXEL_FORMAT_256   /* mode 13h color palette, 1 byte per pixel */
};
/*
 * when an event is recieved (see below on how they are recieved), it
 * is stored in a structure with the following layout:
 */
struct mg_event {
	/* event type */
	enum mg_event_type type;

	/*
	 * XKB keysym for the key -- if 'type' is not MG_KEYDOWN or
	 * MG_KEYUP, the value of this field is undefined.
	 */
	uint32_t key;

	/*
	 * mouse button -- if 'type' is not MG_MOUSEDOWN or MG_MOUSEUP,
	 * the value of this field is undefined.
	 */
	enum mg_mouse_btn button;

	/*
	 * X and Y position of the mouse cursor -- if 'type' is not
	 * MG_MOUSEMOTION, the values of these fields are undefined.
	 */
	int x; /* mouse cursor X position */
	int y; /* mouse cursor Y position */
};
/*
 * now, for the functions.
 *
 * before doing anything with the library, you must initialize it by calling:
 */
MG__DEF void mg_init(int w, int h, const char *title, jmp_buf err_return);
/*
 * the 'w' and 'h' parameters specify the requested size for the window -- the
 * actual width and height might be different and will be stored in the
 * mg_width and mg_height variables.
 *
 * the 'title' parameter specifies the requested title for the window.
 *
 * the 'err_return' parameter must be a valid jmp_buf initialized by a call to
 * setjmp(). if an error is ever encountered, a longjmp() to there occurs;
 * you can use the variable 'mg_errno' to determine what error occurred.
 */

/*
 * the window is configurable using:
 */
MG__DEF void mg_fullscreen(int enable);
MG__DEF void mg_set_title(const char *title);
/*
 * if an error occurs, to convert that 'mg_error' into an error message, use:
 */
MG__DEF const char *mg_strerror(enum mg_error err);
/*
 * once you are ready to quit, call:
 */
MG__DEF void mg_quit(void);
/*
 * to exit the library; this will close the window. do not call this if
 * you are exiting due to a MG_INIT_FAILED error.
 */

/*
 * to recieve events, call one of:
 */
MG__DEF int mg_getevent(struct mg_event *event);
MG__DEF void mg_waitevent(struct mg_event *event);
/*
 * the event data will be stored inside the struct pointed to by 'event'.
 *
 * mg_getevent returns instantly -- if no events are currently pending,
 * 0 is returned; otherwise, 1 is returned.
 *
 * mg_waitevent blocks until an event is recieved.
 */

/*
 * to draw things on the window, use one of the following functions:
 */

/* clear everything on the window with the current background color. */
MG__DEF void mg_clear(void);

/*
 * draw the contents of the memory buffer 'data'. the pixel format is
 * determined by 'pixel_format'. each value represents 1 pixel.
 *
 * for 1 byte-per-pixel pixel formats, 'data' will internally be cast to a
 * (uint8_t *). thus, if you want to use a 1 byte-per-pixel pixel format,
 * it is recommended to use a (uint8_t *) and pass it as the 'data' parameter.
 * note that you may have to cast it to (uint32_t *) in this case.
 *
 * 'width' and 'height' specify the buffer's width and height in PIXELS.
 *
 * if 'width' is larger than buffer's width or 'height' is larger than
 * the buffer's height, the behavior is undefined. if 'width' is smaller
 * than the buffer's width, it'll just result in a messed up looking result. if
 * 'height' is smaller than the buffer's height, it'll work as you'd expect --
 * the resulting image will be cropped.
 *
 * if either 'width' or 'height' are zero, nothing is drawn.
 *
 * the top-left corner of the drawn buffer will be at (x, y).
 */
MG__DEF void mg_draw(const uint32_t *data, uint32_t width, uint32_t height,
		enum mg_pixel_format pixel_format, int x, int y);

/*
 * commit all changes to the window -- calling this is necessary to be
 * 100% sure your changes are actually displayed on the window.
 */
MG__DEF void mg_flush(void);

/*
 * set the current background color to the color specified by the
 * RGB value (r, g, b).
 * the default is (255, 255, 255) (white).
 */
MG__DEF void mg_setbgcolor(uint8_t r, uint8_t g, uint8_t b);

/* end of docs/header */

#endif /* !defined(MG_H) */

/*
 * ===========================================================================
 * IMPLEMENTATION
 */
#if defined(MG_IMPLEMENTATION)

#if !defined(MG_BACKEND_X11) && !defined(MG_BACKEND_WAYLAND)
#error please define a backend for minigraphics.
#elif defined(MG_BACKEND_X11) && defined(MG_BACKEND_WAYLAND)
#error only one backend may be defined.
#endif

/*
 * ===========================================================================
 * CONSTANTS
 */
static const char *mg__strerrors[] = {
	"library initialization failed",
	"out of memory",
	"unsupported color depth",
	"unsupported keymap"
};

/*
 * ===========================================================================
 * X11 BACKEND
 */
#if defined(MG_BACKEND_X11)
#include <stdlib.h>
#include <string.h>

#include <X11/Xlib.h>
#include <X11/XKBlib.h>
#include <X11/Xatom.h>
#include <X11/Xutil.h>

/* constants */
static const uint32_t mg__256_palette[256] = {
	0x00000000, 0xaa020000, 0x00aa1400, 0xaaaa0000, 0x0300aa00, 0xaa00aa00, 0x0055aa00, 0xaaaaaa00,
	0x55555500, 0xff555500, 0x55ff5500, 0xffff5500, 0x5555ff00, 0xff55fd00, 0x55ffff00, 0xffffff00,
	0x00000000, 0x10101000, 0x20202000, 0x35353500, 0x45454500, 0x55555500, 0x65656500, 0x75757500,
	0x8a8a8a00, 0x9a9a9a00, 0xaaaaaa00, 0xbababa00, 0xcacaca00, 0xdfdfdf00, 0xefefef00, 0xffffff00,
	0xff040000, 0xff044100, 0xff038200, 0xff02be00, 0xff00fd00, 0xbe00fe00, 0x8200ff00, 0x4100ff00,
	0x0800ff00, 0x0541ff00, 0x0082ff00, 0x00beff00, 0x00ffff00, 0x00ffbe00, 0x00ff8200, 0x01ff4100,
	0x00ff2400, 0x42ff2200, 0x82ff1d00, 0xbeff1200, 0xffff0000, 0xffbe0000, 0xff820100, 0xff410000,
	0xff828200, 0xff829e00, 0xff82be00, 0xff82df00, 0xff82fd00, 0xdf82fe00, 0xbe82ff00, 0x9e82ff00,
	0x8282ff00, 0x829eff00, 0x82beff00, 0x82dfff00, 0x82ffff00, 0x82ffdf00, 0x82ffbe00, 0x82ff9e00,
	0x82ff8200, 0x9eff8200, 0xbeff8200, 0xdfff8200, 0xffff8200, 0xffdf8200, 0xffbe8200, 0xff9e8200,
	0xffbaba00, 0xffbaca00, 0xffbadf00, 0xffbaef00, 0xffbafe00, 0xefbafe00, 0xdfbaff00, 0xcabaff00,
	0xbabaff00, 0xbacaff00, 0xbadfff00, 0xbaefff00, 0xbaffff00, 0xbaffef00, 0xbaffdf00, 0xbbffca00,
	0xbaffba00, 0xcaffba00, 0xdfffba00, 0xefffba00, 0xffffba00, 0xffefba00, 0xffdfba00, 0xffcaba00,
	0x71010100, 0x71011c00, 0x71013900, 0x71005500, 0x71007100, 0x55007100, 0x39007100, 0x1c007100,
	0x01007100, 0x011c7100, 0x00397100, 0x00557100, 0x00717100, 0x00715500, 0x00713900, 0x00711c00,
	0x00710900, 0x1c710900, 0x39710600, 0x55710300, 0x71710000, 0x71550000, 0x71390000, 0x711c0000,
	0x71393900, 0x71394500, 0x71395500, 0x71396100, 0x71397100, 0x61397100, 0x55397100, 0x45397100,
	0x39397100, 0x39457100, 0x39557100, 0x39617100, 0x39717100, 0x39716100, 0x39715500, 0x3a714500,
	0x39713900, 0x45713900, 0x55713900, 0x61713900, 0x71713900, 0x71613900, 0x71553900, 0x72453900,
	0x71515100, 0x71515900, 0x71516100, 0x71516900, 0x71517100, 0x69517100, 0x61517100, 0x59517100,
	0x51517100, 0x51597100, 0x51617100, 0x51697100, 0x51717100, 0x51716900, 0x51716100, 0x51715900,
	0x51715100, 0x5a715100, 0x61715100, 0x69715100, 0x71715100, 0x71695100, 0x71615100, 0x71595100,
	0x42000000, 0x41001100, 0x41002000, 0x41003100, 0x41004100, 0x32004100, 0x20004100, 0x10004100,
	0x00004100, 0x00104100, 0x00204100, 0x00314100, 0x00414100, 0x00413100, 0x00412000, 0x00411000,
	0x00410300, 0x10410300, 0x20410200, 0x31410100, 0x41410000, 0x41310000, 0x41200000, 0x41100000,
	0x41202000, 0x41202800, 0x41203100, 0x41203900, 0x41204100, 0x39204100, 0x31204100, 0x28204100,
	0x20204100, 0x20284100, 0x20314100, 0x21394100, 0x20414100, 0x20413900, 0x20413100, 0x20412800,
	0x20412000, 0x28412000, 0x31412000, 0x39412000, 0x41412000, 0x41392000, 0x41312000, 0x41282000,
	0x412d2d00, 0x412d3100, 0x412d3500, 0x412d3d00, 0x412d4100, 0x3d2d4100, 0x352d4100, 0x312d4100,
	0x2d2d4100, 0x2d314100, 0x2d354100, 0x2d3d4100, 0x2d414100, 0x2d413d00, 0x2d413500, 0x2d413100,
	0x2d412d00, 0x31412d00, 0x35412d00, 0x3d412d00, 0x41412d00, 0x413d2d00, 0x41352d00, 0x41312d00,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

/* macros */
#define MG__ERROR(errno) { mg_errno = errno; longjmp(mg.err_return, 1); }
#define MG__MIN(x, y) ((x < y) ? x : y)
#define MG__X_EVENT_MASK ExposureMask | StructureNotifyMask | KeyPressMask | \
	KeyReleaseMask | ButtonPressMask | ButtonReleaseMask

/* types */
struct mg__state {
	int screen;
	Display *dpy;
	Window root, win;
	Atom wmdeletewin;
	Atom wmstate;
	Atom fullscreen;
	GC gc;
	Colormap colormap;
	unsigned int depth;

	unsigned long white;
	unsigned long bgcolor;

	Pixmap pixmap;
	uint32_t pixmap_w, pixmap_h;

	int closed;

	jmp_buf err_return;
};

/* global variables */
static struct mg__state mg;

int mg_width;
int mg_height;
enum mg_error mg_errno;

/* internal functions */
static int
mg__handle_x_event(struct mg_event *event, XEvent *xevnt)
{
	static int pressed = 0;
	static unsigned int lastkeycode;
	switch (xevnt->type) {
	case ClientMessage:
		/* we got a message */
		if ((Atom)xevnt->xclient.data.l[0] == mg.wmdeletewin) {
			event->type = MG_QUIT;
			return 1;
		}
		break;
	case ConfigureNotify:
		/* the window has changed somehow */
		if (xevnt->xconfigure.width != mg_width || xevnt->xconfigure.height != mg_height) {
			mg_width = xevnt->xconfigure.width;
			mg_height = xevnt->xconfigure.height;
			event->type = MG_RESIZE;
			return 1;
		}
		break;
	case Expose:
		event->type = MG_REDRAW;
		return 1;
	case KeyPress:
		if (pressed && xevnt->xkey.keycode == lastkeycode) {
			lastkeycode = xevnt->xkey.keycode;
			break;
		}
		pressed = 1;
		lastkeycode = xevnt->xkey.keycode;
		event->key = (uint32_t)XLookupKeysym(&xevnt->xkey, 0);
		event->type = MG_KEYDOWN;
		return 1;
	case KeyRelease:
		if (pressed && xevnt->xkey.keycode == lastkeycode)
			pressed = 0;
		event->key = (uint32_t)XLookupKeysym(&xevnt->xkey, 0);
		event->type = MG_KEYUP;
		return 1;
	case ButtonPress:
		if (xevnt->xbutton.x >= 0 && xevnt->xbutton.y >= 0) {
			enum mg_mouse_btn button;
			int set = 0;
			switch (xevnt->xbutton.button) {
			case 1:
				button = MG_MOUSE_LEFT;
				set = 1;
				break;
			case 2:
				button = MG_MOUSE_MIDDLE;
				set = 1;
				break;
			case 3:
				button = MG_MOUSE_RIGHT;
				set = 1;
				break;
			case 8:
				button = MG_MOUSE_SIDE;
				set = 1;
				break;
			case 9:
				button = MG_MOUSE_EXTRA;
				set = 1;
				break;
			}
			if (set) {
				event->button = button;
				event->type = MG_MOUSEDOWN;
				return 1;
			}
		}
		break;
	case ButtonRelease:
		if (xevnt->xbutton.x >= 0 && xevnt->xbutton.y >= 0) {
			enum mg_mouse_btn button;
			int set = 0;
			switch (xevnt->xbutton.button) {
			case 1:
				button = MG_MOUSE_LEFT;
				set = 1;
				break;
			case 2:
				button = MG_MOUSE_MIDDLE;
				set = 1;
				break;
			case 3:
				button = MG_MOUSE_RIGHT;
				set = 1;
				break;
			case 8:
				button = MG_MOUSE_SIDE;
				set = 1;
				break;
			case 9:
				button = MG_MOUSE_EXTRA;
				set = 1;
				break;
			}
			if (set) {
				event->button = button;
				event->type = MG_MOUSEUP;
				return 1;
			}
		}
		break;
	case MotionNotify:
		if (xevnt->xmotion.x >= 0 && xevnt->xmotion.y >= 0) {
			Window dummy1, dummy2;
			int dummy3, dummy4;
			unsigned int dummy5;

			int x, y;

			if (XQueryPointer(mg.dpy, mg.win, &dummy1, &dummy2, &dummy3,
						&dummy4, &x, &y, &dummy5)) {
				if (x >= 0 && y >= 0 && (event->x != x || event->y != y)) {
					event->x = x;
					event->y = y;
					event->type = MG_MOUSEMOTION;
					return 1;
				}
			}
		}
		break;
	}
	return 0;
}

/* initialization, shutdown, and errors */
void
mg_init(int w, int h, const char *title, jmp_buf err_return)
{
	XEvent xevnt;

	*mg.err_return = *err_return;

	/* open display */
	mg.dpy = XOpenDisplay(NULL);
	if (!mg.dpy)
		MG__ERROR(MG_INIT_FAILED)

	/* set detectable autorepeat */
	XkbSetDetectableAutoRepeat(mg.dpy, True, NULL);

	/* set screen, root window, colormap, and background color */
	mg.screen = DefaultScreen(mg.dpy);
	mg.root = DefaultRootWindow(mg.dpy);
	mg.colormap = DefaultColormap(mg.dpy, mg.screen);
	mg.depth = (unsigned int)DefaultDepth(mg.dpy, mg.screen);
	mg.bgcolor = mg.white = WhitePixel(mg.dpy, mg.screen);

	/* create window */
	mg.win = XCreateSimpleWindow(mg.dpy, mg.root, 0, 0,
			(unsigned int)w, (unsigned int)h, 0, mg.bgcolor, mg.bgcolor);
	mg.closed = 0;
	mg_width = w;
	mg_height = h;

	/* mark the pixmap as "not created" */
	mg.pixmap_w = mg.pixmap_h = 0;

	/* name our window */
	XStoreName(mg.dpy, mg.win, title);

	/* specify WM_DELETE_WINDOW protocol */
	mg.wmdeletewin = XInternAtom(mg.dpy, "WM_DELETE_WINDOW", 1);
	XSetWMProtocols(mg.dpy, mg.win, &mg.wmdeletewin, 1);

	/* sentinel values for the other 2 Atoms */
	mg.wmstate = 0;
	mg.fullscreen = 0;

	/* tell X what events we are interested in */
	XSelectInput(mg.dpy, mg.win, MG__X_EVENT_MASK | PointerMotionMask);

	/* map window */
	XMapWindow(mg.dpy, mg.win);

	/* create graphics context */
	mg.gc = XCreateGC(mg.dpy, mg.win, 0, NULL);

	/* set GC colors */
	XSetBackground(mg.dpy, mg.gc, mg.bgcolor);
	XSetWindowBackground(mg.dpy, mg.win, mg.bgcolor);
	XSetForeground(mg.dpy, mg.gc, mg.bgcolor);

	/* wait for window mapping */
	for (;;) {
		XNextEvent(mg.dpy, &xevnt);
		if (xevnt.type == ConfigureNotify) {
			mg_width = xevnt.xconfigure.width;
			mg_height = xevnt.xconfigure.height;
		} else if (xevnt.type == MapNotify) {
			break;
		}
	}
}

void
mg_fullscreen(int enable)
{
	XEvent xev;

	(void)enable;
	if (mg.wmstate == 0)
		mg.wmstate = XInternAtom(mg.dpy, "_NET_WM_STATE", False);
	if (mg.fullscreen == 0)
		mg.fullscreen = XInternAtom(mg.dpy, "_NET_WM_STATE_FULLSCREEN", False);
	memset(&xev, 0, sizeof(xev));
	xev.type = ClientMessage;
	xev.xclient.window = mg.win;
	xev.xclient.message_type = mg.wmstate;
	xev.xclient.format = 32;

	/*
	 * https://specifications.freedesktop.org/wm-spec/latest/ar01s05.html#id-1.6.8
	 *
	 * _NET_WM_STATE_REMOVE        0       remove/unset property
	 * _NET_WM_STATE_ADD           1       add/set property
	 * _NET_WM_STATE_TOGGLE        2       toggle property
	 */
	xev.xclient.data.l[0] = !!enable;

	xev.xclient.data.l[1] = (long)mg.fullscreen;
	xev.xclient.data.l[2] = 0;
	XSendEvent(mg.dpy, mg.root, False,
			SubstructureRedirectMask | SubstructureNotifyMask, &xev);
}

void
mg_set_title(const char *title)
{
	XStoreName(mg.dpy, mg.win, title);
}

const char *
mg_strerror(enum mg_error err)
{
	return mg__strerrors[err];
}

void
mg_quit(void)
{
	if (!mg.closed) {
		if (mg.pixmap_w != 0 && mg.pixmap_h != 0)
			/* free the pixmap if it exists */
			XFreePixmap(mg.dpy, mg.pixmap);
		XFreeGC(mg.dpy, mg.gc);
		XDestroyWindow(mg.dpy, mg.win);
		XCloseDisplay(mg.dpy);
		mg.closed = 1;
	}
}

/* events */
int
mg_getevent(struct mg_event *event)
{
	/* this is kinda boiletplate-y but i cant figure out a better solution... */
	XEvent xevnt;

	if (XCheckTypedEvent(mg.dpy, ClientMessage, &xevnt))
		/* check for clientmessage events first */
		if (mg__handle_x_event(event, &xevnt))
			return 1;
	if (XCheckWindowEvent(mg.dpy, mg.win, MG__X_EVENT_MASK, &xevnt))
		/*
		 * MotionNotify events in xlib are kinda weird and completely clog up
		 * the event queue, so check if we have any non-pointer-motion events
		 */
		if (mg__handle_x_event(event, &xevnt))
			return 1;
	if (XCheckWindowEvent(mg.dpy, mg.win, MG__X_EVENT_MASK | PointerMotionMask, &xevnt))
		/* if not, throw in pointer events too */
		if (mg__handle_x_event(event, &xevnt))
			return 1;
	return 0;
}

void
mg_waitevent(struct mg_event *event)
{
	XEvent xevnt;
	for (;;) {
		/* wait for an X event to happen */
		XNextEvent(mg.dpy, &xevnt);

		/* handle event */
		if (mg__handle_x_event(event, &xevnt))
			break;
	}
}

/* drawing functions */
void
mg_clear(void)
{
	XClearWindow(mg.dpy, mg.win);
}

void
mg_draw(const uint32_t *data, uint32_t width, uint32_t height,
		enum mg_pixel_format pixel_format, int x, int y)
{
	XImage *ximage;
	size_t i = 0, j = 0;

	if (width == 0 || height == 0)
		return;

	if (mg.depth < 24)
		MG__ERROR(MG_UNSUPPORTED_COLOR_DEPTH)

	if (mg.pixmap_w != width || mg.pixmap_h != height) {
		/* we need a new pixmap */
		if (mg.pixmap_w != 0 && mg.pixmap_h != 0)
			/* free the old one if it exists */
			XFreePixmap(mg.dpy, mg.pixmap);

		mg.pixmap = XCreatePixmap(mg.dpy, mg.win, width, height, mg.depth);
		mg.pixmap_w = width;
		mg.pixmap_h = height;
	}

	ximage = XCreateImage(mg.dpy, CopyFromParent, mg.depth, ZPixmap,
			0, NULL, width, height, 32, (int)(width * 4));

	ximage->data = malloc(width * height * 4);
	if (!ximage->data)
		MG__ERROR(MG_OUT_OF_MEMORY)

	for (; i < width * height; i++) {
		/* X seems to use BGRX, so convert our buffer to that */
		switch (pixel_format) {
		case MG_PIXEL_FORMAT_RGBX:
			ximage->data[j] =     (char)((data[i] & 0x0000ff00) >> 8);
			ximage->data[j + 1] = (char)((data[i] & 0x00ff0000) >> 16);
			ximage->data[j + 2] = (char)((data[i] & 0xff000000) >> 24);
			break;
		case MG_PIXEL_FORMAT_BGRX:
			ximage->data[j] =     (char)((data[i] & 0xff000000) >> 24);
			ximage->data[j + 1] = (char)((data[i] & 0x00ff0000) >> 16);
			ximage->data[j + 2] = (char)((data[i] & 0x0000ff00) >> 8);
			break;
		case MG_PIXEL_FORMAT_XRGB:
			ximage->data[j] =     (char)( data[i] & 0x000000ff);
			ximage->data[j + 1] = (char)((data[i] & 0x0000ff00) >> 8);
			ximage->data[j + 2] = (char)((data[i] & 0x00ff0000) >> 16);
			break;
		case MG_PIXEL_FORMAT_XBGR:
			ximage->data[j] =     (char)((data[i] & 0x00ff0000) >> 24);
			ximage->data[j + 1] = (char)((data[i] & 0x0000ff00) >> 16);
			ximage->data[j + 2] = (char)((data[i] & 0x000000ff) >> 8);
			break;
		case MG_PIXEL_FORMAT_256:
			{
				uint32_t px = mg__256_palette[((uint8_t *)data)[i]];
				ximage->data[j] =     (char)((px & 0xff000000) >> 24);
				ximage->data[j + 1] = (char)((px & 0x00ff0000) >> 16);
				ximage->data[j + 2] = (char)((px & 0x0000ff00) >> 8);
			}
			break;
		}
		j += 4;
	}

	XInitImage(ximage);
	XFillRectangle(mg.dpy, mg.pixmap, mg.gc, 0, 0, width, height);
	XPutImage(mg.dpy, mg.pixmap, mg.gc, ximage, 0, 0, 0, 0, width, height);
	XCopyArea(mg.dpy, mg.pixmap, mg.win, mg.gc, 0, 0, width, height, x, y);
	XDestroyImage(ximage);
}

void
mg_flush(void)
{
	XFlush(mg.dpy);
}

void
mg_setbgcolor(uint8_t r, uint8_t g, uint8_t b)
{
	static int unfreed = 0;

	if (unfreed) {
		XFreeColors(mg.dpy, mg.colormap, &mg.bgcolor, 1, 0);
		unfreed = 0;
	}

	if (r == 0 && g == 0 && b == 0) {
		mg.bgcolor = BlackPixel(mg.dpy, mg.screen);
	} else if (r == 25 && g == 255 && b == 255) {
		mg.bgcolor = mg.white;
	} else {
		XColor color;
		color.red = r * 257;
		color.green = g * 257;
		color.blue = b * 257;

		unfreed = 1;
		XAllocColor(mg.dpy, mg.colormap, &color);
		mg.bgcolor = color.pixel;
	}
	XSetBackground(mg.dpy, mg.gc, mg.bgcolor);
	XSetWindowBackground(mg.dpy, mg.win, mg.bgcolor);
	XSetForeground(mg.dpy, mg.gc, mg.bgcolor);
}
#endif /* defined(MG_BACKEND_X11) */

/*
 * ===========================================================================
 * WAYLAND BACKEND
 */
#if defined(MG_BACKEND_WAYLAND)

#if _POSIX_C_SOURCE < 200112L
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200112L
#endif /* _POSIX_C_SOURCE < 200112L */

#if defined(__linux__)
#include <linux/input-event-codes.h>
#else
#define BTN_MOUSE  0x110
#define BTN_LEFT   0x110
#define BTN_RIGHT  0x111
#define BTN_MIDDLE 0x112
#define BTN_SIDE   0x113
#define BTN_EXTRA  0x114
#endif /* defined(__linux__) */

#include <sys/mman.h>

#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include <wayland-client.h>
#include <xkbcommon/xkbcommon.h>

#include "xdg-shell-client-protocol.h"

/* constants */
static const uint32_t mg__256_palette[256] = {
	0x000000, 0x0002aa, 0x14aa00, 0x00aaaa, 0xaa0003, 0xaa00aa, 0xaa5500, 0xaaaaaa,
	0x555555, 0x5555ff, 0x55ff55, 0x55ffff, 0xff5555, 0xfd55ff, 0xffff55, 0xffffff,
	0x000000, 0x101010, 0x202020, 0x353535, 0x454545, 0x555555, 0x656565, 0x757575,
	0x8a8a8a, 0x9a9a9a, 0xaaaaaa, 0xbababa, 0xcacaca, 0xdfdfdf, 0xefefef, 0xffffff,
	0x0004ff, 0x4104ff, 0x8203ff, 0xbe02ff, 0xfd00ff, 0xfe00be, 0xff0082, 0xff0041,
	0xff0008, 0xff4105, 0xff8200, 0xffbe00, 0xffff00, 0xbeff00, 0x82ff00, 0x41ff01,
	0x24ff00, 0x22ff42, 0x1dff82, 0x12ffbe, 0x00ffff, 0x00beff, 0x0182ff, 0x0041ff,
	0x8282ff, 0x9e82ff, 0xbe82ff, 0xdf82ff, 0xfd82ff, 0xfe82df, 0xff82be, 0xff829e,
	0xff8282, 0xff9e82, 0xffbe82, 0xffdf82, 0xffff82, 0xdfff82, 0xbeff82, 0x9eff82,
	0x82ff82, 0x82ff9e, 0x82ffbe, 0x82ffdf, 0x82ffff, 0x82dfff, 0x82beff, 0x829eff,
	0xbabaff, 0xcabaff, 0xdfbaff, 0xefbaff, 0xfebaff, 0xfebaef, 0xffbadf, 0xffbaca,
	0xffbaba, 0xffcaba, 0xffdfba, 0xffefba, 0xffffba, 0xefffba, 0xdfffba, 0xcaffbb,
	0xbaffba, 0xbaffca, 0xbaffdf, 0xbaffef, 0xbaffff, 0xbaefff, 0xbadfff, 0xbacaff,
	0x010171, 0x1c0171, 0x390171, 0x550071, 0x710071, 0x710055, 0x710039, 0x71001c,
	0x710001, 0x711c01, 0x713900, 0x715500, 0x717100, 0x557100, 0x397100, 0x1c7100,
	0x097100, 0x09711c, 0x067139, 0x037155, 0x007171, 0x005571, 0x003971, 0x001c71,
	0x393971, 0x453971, 0x553971, 0x613971, 0x713971, 0x713961, 0x713955, 0x713945,
	0x713939, 0x714539, 0x715539, 0x716139, 0x717139, 0x617139, 0x557139, 0x45713a,
	0x397139, 0x397145, 0x397155, 0x397161, 0x397171, 0x396171, 0x395571, 0x394572,
	0x515171, 0x595171, 0x615171, 0x695171, 0x715171, 0x715169, 0x715161, 0x715159,
	0x715151, 0x715951, 0x716151, 0x716951, 0x717151, 0x697151, 0x617151, 0x597151,
	0x517151, 0x51715a, 0x517161, 0x517169, 0x517171, 0x516971, 0x516171, 0x515971,
	0x000042, 0x110041, 0x200041, 0x310041, 0x410041, 0x410032, 0x410020, 0x410010,
	0x410000, 0x411000, 0x412000, 0x413100, 0x414100, 0x314100, 0x204100, 0x104100,
	0x034100, 0x034110, 0x024120, 0x014131, 0x004141, 0x003141, 0x002041, 0x001041,
	0x202041, 0x282041, 0x312041, 0x392041, 0x412041, 0x412039, 0x412031, 0x412028,
	0x412020, 0x412820, 0x413120, 0x413921, 0x414120, 0x394120, 0x314120, 0x284120,
	0x204120, 0x204128, 0x204131, 0x204139, 0x204141, 0x203941, 0x203141, 0x202841,
	0x2d2d41, 0x312d41, 0x352d41, 0x3d2d41, 0x412d41, 0x412d3d, 0x412d35, 0x412d31,
	0x412d2d, 0x41312d, 0x41352d, 0x413d2d, 0x41412d, 0x3d412d, 0x35412d, 0x31412d,
	0x2d412d, 0x2d4131, 0x2d4135, 0x2d413d, 0x2d4141, 0x2d3d41, 0x2d3541, 0x2d3141,
	0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

/* macros */
#define MG__ERROR(errno) { mg_errno = errno; longjmp(mg.err_return, 1); }
#define MG__MIN(x, y) (((x) < (y)) ? (x) : (y))

/* types */
enum mg__pointer_event_mask {
	MG__POINTER_EVENT_ENTER = 1 << 0,
	MG__POINTER_EVENT_LEAVE = 1 << 1,
	MG__POINTER_EVENT_MOTION = 1 << 2,
	MG__POINTER_EVENT_BUTTON = 1 << 3,
	MG__POINTER_EVENT_AXIS = 1 << 4,
	MG__POINTER_EVENT_AXIS_SOURCE = 1 << 5,
	MG__POINTER_EVENT_AXIS_STOP = 1 << 6,
	MG__POINTER_EVENT_AXIS_DISCRETE = 1 << 7,
};

struct mg__pointer_event {
	uint32_t event_mask;
	wl_fixed_t surface_x, surface_y;
	uint32_t button, state;
	uint32_t time;
	uint32_t serial;
	struct {
		int valid;
		wl_fixed_t value;
		int32_t discrete;
	} axes[2];
	uint32_t axis_source;
};

struct mg__state {
	/* globals */
	struct wl_display *wl_display;
	struct wl_registry *wl_registry;
	struct wl_shm *wl_shm;
	struct wl_compositor *wl_compositor;
	struct xdg_wm_base *xdg_wm_base;
	struct wl_seat *wl_seat;
	/* objects */
	struct wl_surface *wl_surface;
	struct xdg_surface *xdg_surface;
	struct wl_keyboard *wl_keyboard;
	struct wl_pointer *wl_pointer;
	struct wl_touch *wl_touch;
	struct xdg_toplevel *xdg_toplevel;
	/* state */
	int configured;
	struct mg__pointer_event mg_pointer_event;
	struct xkb_state *xkb_state;
	struct xkb_context *xkb_context;
	struct xkb_keymap *xkb_keymap;

	int closed;
	uint32_t *draw_buf;
	uint32_t bgcolor;
	size_t buf_width, buf_height, buf_stride, buf_size;

	/* highest to lowest priority */
	int pending_quit;
	int pending_resize;
	uint32_t pending_key_down;
	uint32_t pending_key_up;
	enum mg_mouse_btn pending_mouse_down;
	enum mg_mouse_btn pending_mouse_up;
	int pending_mouse_motion_x, pending_mouse_motion_y;

	jmp_buf err_return;
};

/* global variables */
static struct mg__state mg;

int mg_width;
int mg_height;
enum mg_error mg_errno;

/* internal utility functions */
static void
mg__clear_buf(uint32_t *buf, size_t w, size_t h)
{
	size_t i = 0;
	for (; i < w * h; i++)
		buf[i] = mg.bgcolor;
}

static void
mg__frametrimcpy(uint32_t *dst, const uint32_t *src, size_t oldwidth, size_t newwidth,
		size_t oldstride, size_t newstride, size_t oldheight, size_t newheight)
{
	size_t roff = 0, woff = 0;
	size_t stride = MG__MIN(oldstride, newstride);
	size_t i = 0;
	for (; i < MG__MIN(oldheight, newheight) &&
			(roff < oldwidth * oldheight) &&
			(woff < newwidth * newheight); i++) {
		memcpy(dst + woff, src + roff, stride);
		roff += oldwidth;
		woff += newwidth;
	}
}

static int
mg__handle_wl_event(struct mg_event *event)
{
	if (mg.pending_quit) {
		event->type = MG_QUIT;
		mg.pending_quit = 0;
		return 1;
	} else if (mg.pending_resize) {
		event->type = MG_RESIZE;
		mg.pending_resize = 0;
		return 1;
	} else if (mg.pending_key_down) {
		event->type = MG_KEYDOWN;
		event->key = mg.pending_key_down;
		mg.pending_key_down = 0;
		return 1;
	} else if (mg.pending_key_up) {
		event->type = MG_KEYUP;
		event->key = mg.pending_key_up;
		mg.pending_key_up = 0;
		return 1;
	} else if (mg.pending_mouse_down != MG_MOUSE_NO_BUTTON) {
		event->type = MG_MOUSEDOWN;
		event->button = mg.pending_mouse_down;
		mg.pending_mouse_down = MG_MOUSE_NO_BUTTON;
		return 1;
	} else if (mg.pending_mouse_up != MG_MOUSE_NO_BUTTON) {
		event->type = MG_MOUSEUP;
		event->button = mg.pending_mouse_up;
		mg.pending_mouse_up = MG_MOUSE_NO_BUTTON;
		return 1;
	} else if (mg.pending_mouse_motion_x >= 0) {
		event->type = MG_MOUSEMOTION;
		event->x = mg.pending_mouse_motion_x;
		event->y = mg.pending_mouse_motion_y;
		mg.pending_mouse_motion_x = -1;
		mg.pending_mouse_motion_y = -1;
		return 1;
	}
	return 0;
}

/* shared memory stuff */
static void
mg__randname(char *buf)
{
	/* generate a (pretty bad) random filename. */
	struct timespec tp;
	long r;
	int i = 0;
	clock_gettime(CLOCK_REALTIME, &tp);
	r = tp.tv_nsec;
	for (; i < 6; i++) {
		buf[i] = (char)('A'+(r&15)+(r&16)*2);
		r >>= 5;
	}
}

static int
mg__create_shm_file(void)
{
	int retries = 100;
	int fd;
	do {
		char name[] = "/mg-wl_shm-XXXXXX";
		mg__randname(name + sizeof(name) - 7);
		retries--;
		fd = shm_open(name, O_RDWR | O_CREAT | O_EXCL, 0600);
		if (fd >= 0) {
			shm_unlink(name);
			return fd;
		}
	} while (retries > 0 && errno == EEXIST);
	return -1;
}

static int
mg__allocate_shm_file(size_t size)
{
	int fd = mg__create_shm_file();
	int ret;
	if (fd < 0)
		return -1;
	do {
		/*
		 * despite what it sounds like, ftruncate can
		 * actually increase the size of the file,
		 * that's what we're doing here
		 */
		ret = ftruncate(fd, (off_t)size);
	} while (ret < 0 && errno == EINTR);
	if (ret < 0) {
		close(fd);
		return -1;
	}
	return fd;
}

/* wayland event handling */
static void
mg__wl_pointer_enter(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t serial,
		MG_UNUSED struct wl_surface *surface, wl_fixed_t surface_x, wl_fixed_t surface_y)
{
	/* pointer entered our surface */
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_ENTER;
	mg_state->mg_pointer_event.serial = serial;
	mg_state->mg_pointer_event.surface_x = surface_x;
	mg_state->mg_pointer_event.surface_y = surface_y;
}

static void
mg__wl_pointer_leave(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t serial,
		MG_UNUSED struct wl_surface *surface)
{
	/* pointer left our surface */
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.serial = serial;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_LEAVE;
}

static void
mg__wl_pointer_motion(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t time,
		wl_fixed_t surface_x, wl_fixed_t surface_y)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_MOTION;
	mg_state->mg_pointer_event.time = time;
	mg_state->mg_pointer_event.surface_x = surface_x;
	mg_state->mg_pointer_event.surface_y = surface_y;
}

static void
mg__wl_pointer_button(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t serial,
		uint32_t time, uint32_t button, uint32_t state)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_BUTTON;
	mg_state->mg_pointer_event.time = time;
	mg_state->mg_pointer_event.serial = serial;
	mg_state->mg_pointer_event.button = button;
	mg_state->mg_pointer_event.state = state;
}

static void
mg__wl_pointer_axis(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t time, uint32_t axis,
		wl_fixed_t value)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_AXIS;
	mg_state->mg_pointer_event.time = time;
	mg_state->mg_pointer_event.axes[axis].valid = 1;
	mg_state->mg_pointer_event.axes[axis].value = value;
}

static void
mg__wl_pointer_axis_source(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t axis_source)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_AXIS_SOURCE;
	mg_state->mg_pointer_event.axis_source = axis_source;
}

static void
mg__wl_pointer_axis_stop(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t time,
		uint32_t axis)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.time = time;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_AXIS_STOP;
	mg_state->mg_pointer_event.axes[axis].valid = 1;
}

static void
mg__wl_pointer_axis_discrete(void *data, MG_UNUSED struct wl_pointer *wl_pointer, uint32_t axis,
		int32_t discrete)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->mg_pointer_event.event_mask |= MG__POINTER_EVENT_AXIS_DISCRETE;
	mg_state->mg_pointer_event.axes[axis].valid = 1;
	mg_state->mg_pointer_event.axes[axis].discrete = discrete;
}

static void
mg__wl_pointer_frame(void *data, MG_UNUSED struct wl_pointer *wl_pointer)
{
	/* some pointer event happened, this is where we handle these */
	struct mg__state *mg_state = (struct mg__state *)data;
	struct mg__pointer_event *event = &mg_state->mg_pointer_event;

	if ((event->event_mask & MG__POINTER_EVENT_ENTER) ||
			(event->event_mask & MG__POINTER_EVENT_MOTION)) {
		mg_state->pending_mouse_motion_x = wl_fixed_to_int(event->surface_x);
		mg_state->pending_mouse_motion_y = wl_fixed_to_int(event->surface_y);
	}

	if (event->event_mask & MG__POINTER_EVENT_BUTTON && event->button >= BTN_LEFT &&
			event->button <= BTN_EXTRA) {
		enum mg_mouse_btn button;
		int set = 0;
		switch (event->button) {
		case BTN_LEFT:
			button = MG_MOUSE_LEFT;
			set = 1;
			break;
		case BTN_MIDDLE:
			button = MG_MOUSE_MIDDLE;
			set = 1;
			break;
		case BTN_RIGHT:
			button = MG_MOUSE_RIGHT;
			set = 1;
			break;
		case BTN_SIDE:
			button = MG_MOUSE_SIDE;
			set = 1;
			break;
		case BTN_EXTRA:
			button = MG_MOUSE_EXTRA;
			set = 1;
			break;
		}
		if (set) {
			if (event->state == WL_POINTER_BUTTON_STATE_PRESSED)
				mg_state->pending_mouse_down = button;
			else
				mg_state->pending_mouse_up = button;
		}
	}

	memset(event, 0, sizeof(*event));
}

static const struct wl_pointer_listener mg__wl_pointer_listener = {
	.enter = mg__wl_pointer_enter,
	.leave = mg__wl_pointer_leave,
	.motion = mg__wl_pointer_motion,
	.button = mg__wl_pointer_button,
	.axis = mg__wl_pointer_axis,
	.frame = mg__wl_pointer_frame,
	.axis_source = mg__wl_pointer_axis_source,
	.axis_stop = mg__wl_pointer_axis_stop,
	.axis_discrete = mg__wl_pointer_axis_discrete,
};

/* keyboard */
static void
mg__wl_keyboard_keymap(void *data, MG_UNUSED struct wl_keyboard *wl_keyboard, uint32_t format,
		int32_t fd, uint32_t size)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	char *map_shm;
	struct xkb_keymap *xkb_keymap;
	struct xkb_state *xkb_state;

	if (format != WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1)
		MG__ERROR(MG_UNSUPPORTED_KEYMAP)

	map_shm = mmap(NULL, size, PROT_READ, MAP_SHARED, fd, 0);
	if (map_shm == MAP_FAILED)
		MG__ERROR(MG_OUT_OF_MEMORY)

	/* configure the keymap */
	xkb_keymap = xkb_keymap_new_from_string(mg_state->xkb_context, map_shm,
			XKB_KEYMAP_FORMAT_TEXT_V1, XKB_KEYMAP_COMPILE_NO_FLAGS);
	munmap(map_shm, size);
	close(fd);

	xkb_state = xkb_state_new(xkb_keymap);
	xkb_keymap_unref(mg_state->xkb_keymap);
	xkb_state_unref(mg_state->xkb_state);
	mg_state->xkb_keymap = xkb_keymap;
	mg_state->xkb_state = xkb_state;
}

static void
mg__wl_keyboard_enter(MG_UNUSED void *data, MG_UNUSED struct wl_keyboard *wl_keyboard, MG_UNUSED uint32_t serial,
		MG_UNUSED struct wl_surface *surface, MG_UNUSED struct wl_array *keys)
{
	/* TODO: fire MG_KEYDOWN event for each key */
	/*
	struct mg__state *mg_state = (struct mg__state *)data;
	fputs("keyboard enter; keys pressed are:\n", stderr);
	uint32_t *key;
	wl_array_for_each(key, keys) {
		char buf[128];
		xkb_keysym_t sym = xkb_state_key_get_one_sym(
				mg_state->xkb_state, *key + 8);
		xkb_keysym_get_name(sym, buf, sizeof(buf));
		fprintf(stderr, "sym: %-12s (%d), ", buf, sym);
		xkb_state_key_get_utf8(mg_state->xkb_state,
				*key + 8, buf, sizeof(buf));
		fprintf(stderr, "utf8: '%s'\n", buf);
	}
	*/
}

static void
mg__wl_keyboard_key(void *data, MG_UNUSED struct wl_keyboard *wl_keyboard, MG_UNUSED uint32_t serial,
		MG_UNUSED uint32_t time, uint32_t key, uint32_t state)
{
	/* key press/release event */
	struct mg__state *mg_state = (struct mg__state *)data;
	if (state == WL_KEYBOARD_KEY_STATE_PRESSED)
		mg_state->pending_key_down = xkb_state_key_get_one_sym(mg_state->xkb_state, key + 8);
	else
		mg_state->pending_key_up = xkb_state_key_get_one_sym(mg_state->xkb_state, key + 8);
}

static void
mg__wl_keyboard_leave(MG_UNUSED void *data,
		MG_UNUSED struct wl_keyboard *wl_keyboard,
		MG_UNUSED uint32_t serial,
		MG_UNUSED struct wl_surface *surface)
{
	/*fputs("keyboard leave\n", stderr);*/
}

static void
mg__wl_keyboard_modifiers(void *data, MG_UNUSED struct wl_keyboard *wl_keyboard,
		MG_UNUSED uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched,
		uint32_t mods_locked, uint32_t group)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	xkb_state_update_mask(mg_state->xkb_state,
			mods_depressed, mods_latched, mods_locked, 0, 0, group);
}

static void
mg__wl_keyboard_repeat_info(MG_UNUSED void *data,
		MG_UNUSED struct wl_keyboard *wl_keyboard,
		MG_UNUSED int32_t rate,
		MG_UNUSED int32_t delay)
{
	/* stub */
}

static const struct wl_keyboard_listener mg__wl_keyboard_listener = {
	.keymap = mg__wl_keyboard_keymap,
	.enter = mg__wl_keyboard_enter,
	.leave = mg__wl_keyboard_leave,
	.key = mg__wl_keyboard_key,
	.modifiers = mg__wl_keyboard_modifiers,
	.repeat_info = mg__wl_keyboard_repeat_info,
};

static void
mg__wl_buffer_release(MG_UNUSED void *data, struct wl_buffer *wl_buffer)
{
	/* sent by the compositor when it's no longer using this buffer */
	wl_buffer_destroy(wl_buffer);
}

static const struct wl_buffer_listener mg__wl_buffer_listener = {
	.release = mg__wl_buffer_release,
};

static struct wl_buffer *
mg__draw_frame(struct mg__state *mg_state)
{
	size_t stride = (size_t)mg_width * sizeof(uint32_t);
	size_t size = stride * (size_t)mg_height;

	int fd = mg__allocate_shm_file(size);
	uint32_t *data;
	struct wl_shm_pool *pool;
	struct wl_buffer *buffer;

	if (fd == -1)
		return NULL;

	/*
	 * notice the MAP_SHARED flag. this is because we (obviously)
	 * want others to be able to read the contents of data
	 */
	data = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
	if (data == MAP_FAILED) {
		close(fd);
		MG__ERROR(MG_OUT_OF_MEMORY)
	}

	/* create a wayland buffer object */
	pool = wl_shm_create_pool(mg_state->wl_shm, fd, (int32_t)size);
	buffer = wl_shm_pool_create_buffer(pool, 0, (int32_t)mg_width, (int32_t)mg_height,
			(int32_t)stride, WL_SHM_FORMAT_XRGB8888);
	wl_shm_pool_destroy(pool);
	close(fd);

	memcpy(data, mg_state->draw_buf, mg_state->buf_size);

	munmap(data, size);
	wl_buffer_add_listener(buffer, &mg__wl_buffer_listener, NULL);
	return buffer;
}

static void
mg__xdg_toplevel_configure(void *data, MG_UNUSED struct xdg_toplevel *xdg_toplevel,
		int32_t width, int32_t height, MG_UNUSED struct wl_array *states)
{
	struct mg__state *mg_state = (struct mg__state *)data;

	if (width == 0 || height == 0)
		/* compositor is deferring to us */
		return;

	if (width != (int32_t)mg_width || height != (int32_t)mg_height) {
		/* draw_buf needs resizing */
		size_t stride, size;
		uint32_t *new_draw_buf;

		mg_width = width;
		mg_height = height;
		stride = (size_t)mg_width * sizeof(uint32_t);
		size = stride * (size_t)mg_height;

		new_draw_buf = malloc(size);
		if (!new_draw_buf)
			MG__ERROR(MG_OUT_OF_MEMORY)
		mg__clear_buf(new_draw_buf, (size_t)mg_width, (size_t)mg_height);
		mg__frametrimcpy(new_draw_buf, mg_state->draw_buf,
			mg_state->buf_width, (size_t)mg_width,
			mg_state->buf_stride, stride,
			mg_state->buf_height, (size_t)mg_height);
		free(mg_state->draw_buf);
		mg_state->draw_buf = new_draw_buf;
		mg_state->buf_width = (size_t)mg_width;
		mg_state->buf_stride = stride;
		mg_state->buf_height = (size_t)mg_height;
		mg_state->buf_size = stride * (size_t)mg_height;

		mg_state->pending_resize = 1;
	}
}

static void
mg__xdg_toplevel_close(void *data, MG_UNUSED struct xdg_toplevel *toplevel)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	mg_state->pending_quit = 1;
}

static const struct xdg_toplevel_listener mg__xdg_toplevel_listener = {
	.configure = mg__xdg_toplevel_configure,
	.close = mg__xdg_toplevel_close,
};

static void
mg__xdg_surface_configure(void *data, struct xdg_surface *xdg_surface, uint32_t serial)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	struct wl_buffer *buffer;
	mg_state->configured++;
	xdg_surface_ack_configure(xdg_surface, serial);

	buffer = mg__draw_frame(mg_state);
	wl_surface_attach(mg_state->wl_surface, buffer, 0, 0);
	wl_surface_commit(mg_state->wl_surface);
}

static const struct xdg_surface_listener mg__xdg_surface_listener = {
	.configure = mg__xdg_surface_configure,
};

static void
mg__xdg_wm_base_ping(MG_UNUSED void *data, struct xdg_wm_base *xdg_wm_base, uint32_t serial)
{
	xdg_wm_base_pong(xdg_wm_base, serial);
}

static const struct xdg_wm_base_listener mg__xdg_wm_base_listener = {
	.ping = mg__xdg_wm_base_ping,
};

static void
mg__wl_seat_capabilities(void *data, MG_UNUSED struct wl_seat *wl_seat, uint32_t capabilities)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	int have_keyboard;

	int have_pointer = capabilities & WL_SEAT_CAPABILITY_POINTER;

	if (have_pointer && !mg_state->wl_pointer) {
		mg_state->wl_pointer = wl_seat_get_pointer(mg_state->wl_seat);
		wl_pointer_add_listener(mg_state->wl_pointer,
				&mg__wl_pointer_listener, mg_state);
	} else if (!have_pointer && mg_state->wl_pointer) {
		wl_pointer_release(mg_state->wl_pointer);
		mg_state->wl_pointer = NULL;
	}

	have_keyboard = capabilities & WL_SEAT_CAPABILITY_KEYBOARD;

	if (have_keyboard && !mg_state->wl_keyboard) {
		mg_state->wl_keyboard = wl_seat_get_keyboard(mg_state->wl_seat);
		wl_keyboard_add_listener(mg_state->wl_keyboard,
				&mg__wl_keyboard_listener, mg_state);
	} else if (!have_keyboard && mg_state->wl_keyboard) {
		wl_keyboard_release(mg_state->wl_keyboard);
		mg_state->wl_keyboard = NULL;
	}
}

static void
mg__wl_seat_name(MG_UNUSED void *data, MG_UNUSED struct wl_seat *wl_seat, MG_UNUSED const char *name)
{
	/* stub */
}

static const struct wl_seat_listener mg__wl_seat_listener = {
	.capabilities = mg__wl_seat_capabilities,
	.name = mg__wl_seat_name,
};

static void
mg__registry_global(void *data, struct wl_registry *wl_registry, uint32_t name,
		const char *interface, MG_UNUSED uint32_t version)
{
	struct mg__state *mg_state = (struct mg__state *)data;
	/* remember strcmp returns 0 if the strings are equal */
	if (!strcmp(interface, wl_shm_interface.name)) {
		mg_state->wl_shm = wl_registry_bind(
				wl_registry, name, &wl_shm_interface, 1);
	} else if (!strcmp(interface, wl_compositor_interface.name)) {
		mg_state->wl_compositor = wl_registry_bind(
				wl_registry, name, &wl_compositor_interface, 4);
	} else if (!strcmp(interface, xdg_wm_base_interface.name)) {
		mg_state->xdg_wm_base = wl_registry_bind(
				wl_registry, name, &xdg_wm_base_interface, 1);
		xdg_wm_base_add_listener(mg_state->xdg_wm_base,
				&mg__xdg_wm_base_listener, mg_state);
	} else if (!strcmp(interface, wl_seat_interface.name)) {
		mg_state->wl_seat = wl_registry_bind(
				wl_registry, name, &wl_seat_interface, 7);
		wl_seat_add_listener(mg_state->wl_seat,
				&mg__wl_seat_listener, mg_state);
	}
}

static void
mg__registry_global_remove(MG_UNUSED void *data, MG_UNUSED struct wl_registry *wl_registry,
		MG_UNUSED uint32_t name)
{
	/* stub */
}

static const struct wl_registry_listener wl_registry_listener = {
	.global = mg__registry_global,
	.global_remove = mg__registry_global_remove,
};

/* initialization, shutdown, and errors */
void
mg_init(int w, int h, const char *title, jmp_buf err_return)
{
	mg.configured = 0;
	mg.closed = 0;

	/* remember we're using XRGB */
	mg.bgcolor = 0x00ffffff;

	mg_width = w;
	mg_height = h;
	mg.buf_width = (size_t)mg_width;
	mg.buf_height = (size_t)mg_height;
	mg.buf_stride = mg.buf_width * sizeof(uint32_t);
	mg.buf_size = mg.buf_stride * mg.buf_height;

	*mg.err_return = *err_return;

	mg.draw_buf = malloc(mg.buf_size);
	if (!mg.draw_buf)
		MG__ERROR(MG_INIT_FAILED)
	mg_clear();

	mg.pending_quit = 0;
	mg.pending_resize = 0;
	mg.pending_key_down = 0;
	mg.pending_key_up = 0;
	mg.pending_mouse_down = MG_MOUSE_NO_BUTTON;
	mg.pending_mouse_up = MG_MOUSE_NO_BUTTON;
	mg.pending_mouse_motion_x = -1;
	mg.pending_mouse_motion_y = -1;

	mg.wl_display = wl_display_connect(NULL);
	if (!mg.wl_display)
		MG__ERROR(MG_INIT_FAILED)

	mg.wl_registry = wl_display_get_registry(mg.wl_display);
	mg.xkb_context = xkb_context_new(XKB_CONTEXT_NO_FLAGS);
	wl_registry_add_listener(mg.wl_registry, &wl_registry_listener, &mg);
	wl_display_roundtrip(mg.wl_display);

	mg.wl_surface = wl_compositor_create_surface(mg.wl_compositor);
	mg.xdg_surface = xdg_wm_base_get_xdg_surface(
			mg.xdg_wm_base, mg.wl_surface);
	xdg_surface_add_listener(mg.xdg_surface, &mg__xdg_surface_listener, &mg);
	mg.xdg_toplevel = xdg_surface_get_toplevel(mg.xdg_surface);
	xdg_toplevel_add_listener(mg.xdg_toplevel,
			&mg__xdg_toplevel_listener, &mg);
	xdg_toplevel_set_title(mg.xdg_toplevel, title);
	wl_surface_commit(mg.wl_surface);

	while (mg.configured < 2)
		wl_display_dispatch(mg.wl_display);
}

void
mg_fullscreen(int enable)
{
	if (enable)
		xdg_toplevel_set_fullscreen(mg.xdg_toplevel, NULL);
	else
		xdg_toplevel_unset_fullscreen(mg.xdg_toplevel);
}

void
mg_set_title(const char *title)
{
	xdg_toplevel_set_title(mg.xdg_toplevel, title);
}

const char *
mg_strerror(enum mg_error err)
{
	return mg__strerrors[err];
}

void
mg_quit(void)
{
	if (!mg.closed) {
		free(mg.draw_buf);
		mg.draw_buf = NULL;

		wl_surface_attach(mg.wl_surface, NULL, 0, 0);
		wl_surface_commit(mg.wl_surface);
		wl_surface_destroy(mg.wl_surface);
		xdg_surface_destroy(mg.xdg_surface);
		xdg_toplevel_destroy(mg.xdg_toplevel);
		xdg_wm_base_destroy(mg.xdg_wm_base);
		wl_display_disconnect(mg.wl_display);
		mg.closed = 1;
	}
}

/* events */
int
mg_getevent(struct mg_event *event)
{
	while (wl_display_prepare_read(mg.wl_display) < 0)
		wl_display_dispatch_pending(mg.wl_display);

	wl_display_flush(mg.wl_display);
	wl_display_read_events(mg.wl_display);
	wl_display_dispatch_pending(mg.wl_display);
	return mg__handle_wl_event(event);
}

void
mg_waitevent(struct mg_event *event)
{
	for (;;) {
		/* wait for a wayland event to happen */
		wl_display_dispatch(mg.wl_display);

		/* handle event */
		if (mg__handle_wl_event(event))
			break;
	}
}

/* drawing functions */
void
mg_clear(void)
{
	mg__clear_buf(mg.draw_buf, mg.buf_width, mg.buf_height);
}

void
mg_draw(const uint32_t *data, uint32_t width, uint32_t height,
		enum mg_pixel_format pixel_format, int x, int y)
{
	if (x < (int)mg.buf_width && y < (int)mg.buf_height) {
		size_t i = 0; /* position in buffer */
		int dx, dy = 0; /* x offset / y offset to draw at */
		for (; dy < (int)height; dy++) {
			for (dx = 0; dx < (int)width; dx++) {
				if ((dx + x) >= 0 && (dy + y) >= 0 && (dx + x) < (int)mg.buf_width &&
						(dy + y) < (int)mg.buf_height) {
					/* remember we're using XRGB */
					switch (pixel_format) {
					case MG_PIXEL_FORMAT_RGBX:
						mg.draw_buf[(dy + y) * (int)mg.buf_width + (dx + x)] =
							data[i] >> 8;
						break;
					case MG_PIXEL_FORMAT_BGRX:
						mg.draw_buf[(dy + y) * (int)mg.buf_width + (dx + x)] =
							((data[i] & 0xff000000) >> 24) |
							((data[i] & 0x00ff0000) >> 8) |
							((data[i] & 0x0000ff00) << 8);
						break;
					case MG_PIXEL_FORMAT_XRGB:
						mg.draw_buf[(dy + y) * (int)mg.buf_width + (dx + x)] =
							data[i];
						break;
					case MG_PIXEL_FORMAT_XBGR:
						mg.draw_buf[(dy + y) * (int)mg.buf_width + (dx + x)] =
							((data[i] & 0x00ff0000) >> 16) |
							( data[i] & 0x0000ff00) |
							((data[i] & 0x000000ff) << 16);
						break;
					case MG_PIXEL_FORMAT_256:
						mg.draw_buf[(dy + y) * (int)mg.buf_width + (dx + x)] =
							mg__256_palette[((uint8_t *)(data))[i]];
						break;
					}
				}
				i++;
			}
		}
	}
}

void
mg_flush(void)
{
	/* submit a frame for this event */
	if (!mg.closed) {
		struct wl_buffer *buffer = mg__draw_frame(&mg);
		wl_surface_attach(mg.wl_surface, buffer, 0, 0);
		wl_surface_damage_buffer(mg.wl_surface, 0, 0, INT32_MAX, INT32_MAX);
		wl_surface_commit(mg.wl_surface);
	}
}

/* functions to set colors */
void
mg_setbgcolor(uint8_t r, uint8_t g, uint8_t b)
{
	/* remember we're using XRGB */
	mg.bgcolor = (uint32_t)((r << 16) | (g << 8) | b);
}
#endif /* defined(MG_BACKEND_WAYLAND) */

#endif /* MG_IMPLEMENTATION */

/*
 * This library is available under 2 licenses - choose whichever you prefer.
 *
 * ---------------------------------------------------------------------------
 * ALTERNATIVE A - Unlicense
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information, please refer to <http://unlicense.org/>
 *
 * ---------------------------------------------------------------------------
 * ALTERNATIVE B - MIT/X Consortium License
 *
 * Copyright (c) 2025 slightlyeepy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
